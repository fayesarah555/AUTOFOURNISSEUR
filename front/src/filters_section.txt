      <section className="filters-card">
        <form onSubmit={handleSubmit} className="filters-form">
          <div className="filters-row">
            <label className="filters-field">
              <span>Recherche libre</span>
              <input
                type="text"
                value={formState.q}
                placeholder="Nom, spécialité, note..."
                onChange={(event) => updateFormState('q', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>Distance (km)</span>
              <input
                type="number"
                min="0"
                value={formState.distanceKm}
                onChange={(event) => updateFormState('distanceKm', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>Poids (kg)</span>
              <input
                type="number"
                min="0"
                value={formState.weightKg}
                onChange={(event) => updateFormState('weightKg', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>Prix max (€)</span>
              <input
                type="number"
                min="0"
                value={formState.maxPrice}
                onChange={(event) => updateFormState('maxPrice', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>Satisfaction min</span>
              <input
                type="number"
                min="0"
                max="5"
                step="0.1"
                value={formState.minRating}
                onChange={(event) => updateFormState('minRating', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>Ponctualité min (%)</span>
              <input
                type="number"
                min="0"
                max="100"
                value={formState.minOnTimeRate}
                onChange={(event) => updateFormState('minOnTimeRate', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>Délai max (jours)</span>
              <input
                type="number"
                min="0"
                value={formState.maxLeadTime}
                onChange={(event) => updateFormState('maxLeadTime', event.target.value)}
              />
            </label>
            <label className="filters-field">
              <span>CO₂ max</span>
              <input
                type="number"
                min="0"
                value={formState.maxCo2}
                onChange={(event) => updateFormState('maxCo2', event.target.value)}
              />
            </label>
          </div>

          <div className="filters-tags">
            <fieldset>
              <legend>Modes</legend>
              <div className="chip-group">
                {MODE_OPTIONS.map((option) => (
                  <button
                    key={option.value}
                    type="button"
                    className={`chip ${formState.modes.includes(option.value) ? 'chip-active' : ''}`}
                    onClick={() =>
                      updateFormState('modes', toggleItem(formState.modes, option.value))
                    }
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </fieldset>

            <fieldset>
              <legend>Couverture</legend>
              <div className="chip-group">
                {COVERAGE_OPTIONS.map((option) => (
                  <button
                    key={option.value}
                    type="button"
                    className={`chip ${
                      formState.coverage.includes(option.value) ? 'chip-active' : ''
                    }`}
                    onClick={() =>
                      updateFormState('coverage', toggleItem(formState.coverage, option.value))
                    }
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </fieldset>

            <fieldset>
              <legend>Régions desservies</legend>
              <div className="chip-group">
                {REGION_OPTIONS.map((option) => (
                  <button
                    key={option.value}
                    type="button"
                    className={`chip ${
                      formState.regions.includes(option.value) ? 'chip-active' : ''
                    }`}
                    onClick={() =>
                      updateFormState('regions', toggleItem(formState.regions, option.value))
                    }
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </fieldset>

            {featureGroups.map((group) => (
              <fieldset key={group.label}>
                <legend>{group.label}</legend>
                <div className="chip-group">
                  {group.options.map((option) => (
                    <button
                      key={option.value}
                      type="button"
                      className={`chip ${
                        formState.features.includes(option.value) ? 'chip-active' : ''
                      }`}
                      onClick={() =>
                        updateFormState('features', toggleItem(formState.features, option.value))
                      }
                    >
                      {option.label}
                    </button>
                  ))}
                </div>
              </fieldset>
            ))}

            {availableFilters.pickupDepartments.length > 0 && (
              <fieldset>
                <legend>Départ (chargement)</legend>
                <div className="chip-group">
                  {availableFilters.pickupDepartments.map((dept) => (
                    <button
                      key={`pickup-${dept}`}
                      type="button"
                      className={`chip ${
                        formState.pickupDepartments.includes(dept) ? 'chip-active' : ''
                      }`}
                      onClick={() =>
                        updateFormState('pickupDepartments', toggleItem(formState.pickupDepartments, dept))
                      }
                    >
                      {formatDepartmentLabel(dept)}
                    </button>
                  ))}
                </div>
              </fieldset>
            )}

            {availableFilters.deliveryDepartments.length > 0 && (
              <fieldset>
                <legend>Arrivée (livraison)</legend>
                <div className="chip-group">
                  {availableFilters.deliveryDepartments.map((dept) => (
                    <button
                      key={`delivery-${dept}`}
                      type="button"
                      className={`chip ${
                        formState.deliveryDepartments.includes(dept) ? 'chip-active' : ''
                      }`}
                      onClick={() =>
                        updateFormState('deliveryDepartments', toggleItem(formState.deliveryDepartments, dept))
                      }
                    >
                      {formatDepartmentLabel(dept)}
                    </button>
                  ))}
                </div>
              </fieldset>
            )}

            <fieldset>
              <legend>Contrats</legend>
              <div className="chip-group">
                {FLEXIBILITY_OPTIONS.map((option) => (
                  <button
                    key={option.value}
                    type="button"
                    className={`chip ${
                      formState.contractFlexibility.includes(option.value) ? 'chip-active' : ''
                    }`}
                    onClick={() =>
                      updateFormState(
                        'contractFlexibility',
                        toggleItem(formState.contractFlexibility, option.value)
                      )
                    }
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </fieldset>
          </div>

          <div className="filters-bottom-row">
            <label className="filters-checkbox">
              <input
                type="checkbox"
                checked={formState.requireWeightMatch}
                onChange={(event) => updateFormState('requireWeightMatch', event.target.checked)}
              />
              Respect strict du poids minimal
            </label>
            <div className="filters-actions">
              <button type="button" className="button-secondary" onClick={handleReset}>
                Réinitialiser
              </button>
              <button type="submit" className="button-primary">
                Rechercher
              </button>
            </div>
          </div>
        </form>
        {activeFilters.length > 0 && (
          <div className="active-filters">
            {activeFilters.map((badge, index) => (
              <span key={`${badge.label}-${index}`} className="active-filter">
                {badge.label}
              </span>
            ))}
          </div>
        )}
      </section>
